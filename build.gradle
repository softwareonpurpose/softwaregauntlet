plugins {
    id 'java'
}
group 'org.softwareonpurpose'
version '0.0.1-SNAPSHOT'
repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.testng:testng:7.5+'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'ch.qos.logback:logback-core:1.2.10'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    //noinspection GradlePackageUpdate
    implementation 'org.seleniumhq.selenium:selenium-java:3.+'
    implementation files('./src/main/resources/coverage4test-3.0.0.jar')
    implementation files('./src/main/resources/uinavigator-3.0.3.jar')
    implementation files('./src/main/resources/calibrator4test-1.5.1.jar')
    implementation files('./src/main/resources/indentmanager-1.0.7.jar')
}
wrapper {
    version '7.3'
}
test {
    description = "All tests"
    systemProperties['env'] = System.properties["env"]
    systemProperties['lang'] = System.properties["lang"]
    systemProperties['host'] = System.properties["host"]
    useTestNG()
}
//Suites
task regression(type: Test) {
    description = "All tests"
    systemProperties['env'] = System.properties["env"]
    systemProperties['lang'] = System.properties["lang"]
    systemProperties['host'] = System.properties["host"]
    useTestNG();
}
task smoke(type: Test) {
    description = "Smoke tests"
    systemProperties['env'] = System.properties["env"]
    systemProperties['lang'] = System.properties["lang"]
    systemProperties['host'] = System.properties["host"]
    useTestNG { includeGroups 'smoke' }
}
task acceptance(type: Test) {
    useTestNG { includeGroups 'acceptance' }
}
task release(type: Test) {
    useTestNG { includeGroups 'release' }
}
task debug(type: Test) {
    useTestNG { includeGroups 'debug' }
}
task deployment(type: Test) {
    useTestNG { includeGroups 'acceptance', 'release' }
}

tasks.withType(Test) {
    maxParallelForks = (Runtime.runtime.availableProcessors() - 2)
}
